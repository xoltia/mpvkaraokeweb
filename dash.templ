package mpvwebkaraoke

import (
    "net/url"
	"fmt"
	"strconv"
)

type Member struct {
    User
    QueueOpen bool
}

func (m Member) avatarURL(size int) string {
    if m.Avatar == "" {
        return m.defaultAvatarURL()
    }

    return fmt.Sprintf("https://cdn.discordapp.com/avatars/%s/%s.png?size=%d", m.ID, m.Avatar, size)
}

func (m Member) defaultAvatarURL() string {
    var index int

    if m.Discriminator == "0" {
        id, _ := strconv.Atoi(m.ID)
        index = (id >> 22) % 6
    } else {
        disc, _ := strconv.Atoi(m.Discriminator)
        index = disc % 5
    }

    return fmt.Sprintf("https://cdn.discordapp.com/embed/avatars/%d.png", index)
}

func urlDomain(urlString string) string {
    u, err := url.Parse(urlString)
    if err != nil {
        return ""
    }
    return u.Host
}

func adminSession(ctx context.Context) bool {
    session, ok := ctx.Value(userKey).(User)
    return ok && session.Admin
}

func matchSession(ctx context.Context, sid string) bool {
    session, ok := ctx.Value(userKey).(User)
    return ok && session.ID == sid
}

templ queuePage(songs []Song) {
        <html>
            <head>
                <title>Queue</title>
                <meta name="viewport" content="width=device-width, initial-scale=1.0" />
                <meta charset="utf-8" />
                <script src="https://unpkg.com/htmx.org@1.9.10"
                    integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC"
                    crossorigin="anonymous"></script>
                <script src="https://unpkg.com/htmx.org@1.9.11/dist/ext/sse.js"></script>
                <link rel="stylesheet" href="/style.css" />
            </head>
            <body class="bg-neutral-900 text-neutral-100">
                <div class="container mx-auto py-8 max-w-6xl px-2"
                    hx-ext="sse"
                    sse-connect="/sse"
                >
                    <div class="flex flex-col md:flex-row gap-4">
                        <div class="grow-0 md:w-1/3">
                            <div  class="bg-neutral-800 p-4 rounded-md">
                                <h1 class="text-2xl mb-3">Current Song</h1>
                                @currentlyPlaying(nil, true)
                            </div>
                            <div class="bg-neutral-800 p-4 rounded-md mt-4">
                                <h1 class="text-2xl mb-3">Members</h1>
                                <div hx-get="/queue/members" hx-swap="outerHTML" hx-trigger="load">
                                    <p>Loading...</p>
                                </div>
                            </div>
                        </div>
                        <div class="grow-1 md:grow-0 md:w-2/3">
                            <div class="bg-neutral-800 p-4 rounded-md">
                                <div class="flex justify-between items-center mb-4">
                                    <h1 class="text-2xl">Queue</h1>
                                    <a href="/queue/request" class="bg-pink-300 text-white px-4 py-2 rounded-md">Request a Song</a>
                                </div>
                                @queueTable(songs)
                            </div>
                        </div>
                    </div>
                </div>
            </body>
        </html>
}

templ membersList(sessions []Member) {
    <ul class="list-none" hx-get="/queue/members" hx-swap="outerHTML"
        hx-trigger="sse:session:join, sse:queue:change, sse:session:leave">
        for _, session := range sessions {
            <li class="flex items-center gap-2 mb-2">
                <img
                    class={
                        "rounded-full", "h-8", "w-8", "border-2",
                        templ.KV("border-pink-300", session.Admin),
                        templ.KV("border-sky-300", !session.Admin && session.QueueOpen),
                        templ.KV("border-neutral-700", !session.Admin && !session.QueueOpen)
                    }
                    alt={session.Name}
                    src={session.avatarURL(32)}
                />
                <span>
                    {session.Name}
                </span>
            </li>
        }
    </ul>
}

templ queueTable(songs []Song) {
        <div class="grid grid-cols-1 gap-4" sse-swap="queue:set" hx-swap="outerHTML">
            if len(songs) == 0 {
                <p class="text-lg">No songs in the queue</p>
            } else {
                for _, song := range songs {
                     @songRow(song)
                }
            }
            <div sse-swap="queue:push" hx-swap="beforebegin"></div>
        </div>
}

templ songRow(song Song) {
    <div class="bg-neutral-700 p-4 rounded-md flex items-center gap-4 flex-col md:flex-row"
        sse-swap={fmt.Sprintf("queue:remove:%d", song.ID)} hx-swap="delete">
        <img src={song.Thumbnail} alt={song.Title} class="md:h-16 md:w-38 aspect-video rounded-md" />
        <div>
            <h2 class="text-lg font-bold leading-tight">
                <a href={templ.URL(song.URL)} target="_blank" class="text-sky-300">{song.Title}</a>
            </h2>
            <p class="text-sm">
                Requested by: {song.Requester.Name} - Duration: {song.Duration.String()}
            </p>
        </div>
    </div>
}

templ currentlyPlaying(song *Song, firstLoad bool) {
    if firstLoad {
        <p class="text-lg" hx-get="/queue/current" hx-swap="outerHTML" hx-trigger="load">
            Loading...
        </p>
    } else if song == nil {
        <p class="text-lg" hx-get="/queue/current" hx-swap="outerHTML" hx-trigger="sse:queue:change">
            No song currently playing
        </p>
    } else {
        <div class="flex items-center" hx-get="/queue/current" hx-swap="outerHTML" hx-trigger="sse:queue:change">
            <img src={song.Thumbnail} alt={song.Title} class="h-16 w-38 rounded-md" />
            <div class="ml-4">
                <h2 class="text-lg font-bold leading-tight mb-1 line-clamp-2">
                    <a href={templ.URL(song.URL)} target="_blank">{song.Title}</a>
                </h2>
                <span class="text-sm">Requested by {song.Requester.Name}</span>
                if song.LyricsURL.Valid {
                    <small class="block">
                        <a href={templ.URL(song.LyricsURL.String)} target="_blank" class="text-sky-300">View Lyrics</a>
                    </small>
                }
            </div>
        </div>
    }
}